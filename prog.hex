// Sample picoMIPS program 
// n = 8 bits, Isize = 7+n = 15 bits
// format: 3b opcode, 2b %d, 2b %s, 8b immediate or address
// x2 = a11*x1 + a12*y1 + b11; y2 = a21*x1 + a22*y1 + b21;
// HEX /////////// BINARY /////////////// ASSEMBLER ///////////////////////
5000    // 15'b101_00_00_00000000     // 0  WAIT1 -, -, 0;    wait readyin=0
0000    // 15'b000_00_00_00000000     // 1  WAIT0 -, -, 0;    wait readyin=1
6000    // 15'b110_00_00_00000000     //2   ADDF %0, -, -;    REG 0 <=  x1
6400    // 15'b110_01_00_00000000     //3   ADDF %1, -, -;    REG 1 <=  x1
5000    // 15'b101_00_00_00000000     //4  WAIT1 -, -, 0;    wait readyin=0
0000    // 15'b000_00_00_00000000     // 5  WAIT0 -, -, 0;    wait readyin=1
6800    // 15'b110_10_00_00000000     // 6  ADDF %2, -, -;    REG 2 <=  y1
6C00    // 15'b110_11_00_00000000     //7   ADDF %3, -, -;    REG 3 <=  y1
5000    // 15'b101_00_00_00000000     // 8  WAIT1 -, -, 0;    wait readyin=0
3060    // 15'b011_00_00_01100000     // 9  MULI %0, -, 0.75; %0 = %0 * 0.75; // 0.75x1
34C0    // 15'b011_01_00_11000000     // 10 MULI %1, -, -0.5; %1 = %1 * -0.5; // -0.5x1
3840    // 15'b011_10_00_01000000     // 11  MULI %2, -, 0.5;  %2 = %2 * 0.5;  // 0.5y1
3C60    // 15'b011_11_00_01100000     // 12   MULI %3, -, 0.75; %3 = %3 * 0.75; // 0.75y1
1200    // 15'b001_00_10_00000000     // 13  ADD  %0, %2, -;    %0 = %0 + %2;   // 0.75x1 + 0.5y1
2014    // 15'b010_00_00_00010100     // 14  ADDI %0, -, 20;   %0 = %0 + 20;   // x2 = 0.75x1 + 0.5y1 + 20
1700    // 15'b001_01_11_00000000     //15   ADD  %1, %3, -;    %1 = %1 + %3;   // -0.5x1 + 0.75y1
24EC    // 15'b010_01_00_11101100     //16   ADDI %1, -, -20;  %1 = %1 + -20;  // y2 = -0.5x1 + 0.75y1 - 20
4000    // 15'b100_00_00_00000000     //17   SHOW  %0, -, -;    SHOW X2
0000    // 15'b000_00_00_00000000     //18   WAIT0 -, -, 0;    wait readyin=1
4400    // 15'b100_01_00_00000000     //19   SHOW %1, -, -;    SHOW Y2
5000    // 15'b101_00_00_00000000     //20  WAIT1 -, -, 0;    wait readyin=0
700B    // 15'b111_00_00_00001011     //21   RET -, -, 11      return 0 Instruction

